# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-node # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  enableAPIGLogs: true
  stage: ${opt:stage,'dev'}

  environment:
    MYSQLHOST: ${self:custom.mysqlHost.${self:provider.stage}}
    MYSQLPORT: ${self:custom.mysqlPort.${self:provider.stage}}
    MYSQLUSER: ${self:custom.mysqlUser.${self:provider.stage}}
    MYSQLPASS: ${self:custom.mysqlPassword.${self:provider.stage}}
    MYSQLDATABASE: ${self:custom.mysqlDatabase.${self:provider.stage}}
    SECRET_KEY: ${ssm:secretKey}
    EMAIL: "verma9797@gmail.com"
    PASSWORD: ${ssm:gmailPwd}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

custom:
  stages:
    - dev
    - staging
    - prod
  mysqlHost:
    dev: ${ssm:mySqlHost}
    staging: "sdasda" #get from ssm
    prod: ${ssm:/myapp/prod/mysql-host} #get from ssm
  mysqlUser:
    dev: ${ssm:mySqlUser}
    staging: myapp_stag
    prod: myapp
  mysqlPassword:
    dev: ${ssm:mySqlPassword} #get from ssm (secure)
    staging: "sdfsdfsdf" #get from ssm (secure)
    prod: ${ssm:/myapp/prod/mysql-password~true} #get from ssm (secure)
  mysqlDatabase:
    dev: 'dev_society'
    staging: myapp_staging
    prod: myapp_prod
  mysqlPort:
    dev: '3306'
    staging: '3306'
    prod: '3306'
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  societyRecieptApi:
    handler: handler/payment-and-reciept-handler.societyRecieptHandler
    events:
    - http:
        method: any
        path: payment-and-reciept/{proxy+}
        cors: true
  monthlyRecieptUpdateByCron:
    handler: handler/payment-and-reciept-handler.monthlyRecieptUpdateByCron
    events:
    - http:
        method: get
        path: monthlyRecieptUpdateByCron
        cors: true
        rate: cron(9 30 * * ? *)
  ownerApi:
    handler: handler/owner-handler.ownerHandler
    events:
    - http:
        method: any
        path: owner/{proxy+}
        cors: true
  authUser:
    handler: handler/auth-handler.authHandler
    events:
    - http:
        method: any
        path: auth/{proxy+}
        cors: true
  flatApi:
    handler: handler/flat-handler.flatHandler
    events:
    - http:
        method: any
        path: flat/{proxy+}
        cors: true
plugins:
  - serverless-webpack
  - serverless-offline
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: lambda-node-dev-serverlessdeploymentbucket-17ks35mmrtt63
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
